using System;
using System.Drawing;
using System.Windows.Forms;

namespace BaiTapGK
{
    public partial class SinglePlayerForm : FullscreenSupportForm
    {
        private Random random;
        private int playerScore = 0;
        private int computerScore = 0;
        private string playerName;
        private System.Windows.Forms.Timer? gameResultTimer;
        private HandGestureAnimationControl? playerGestureControl;
        private HandGestureAnimationControl? computerGestureControl;
        private BattleResultControl? battleResultControl;

        public SinglePlayerForm(string playerName)
        {
            InitializeComponent();
            this.playerName = playerName;
            random = new Random();
            lblPlayerName.Text = $"Nguoi choi: {playerName}";
            UpdateScore();
            this.StartPosition = FormStartPosition.CenterScreen;
            this.FormBorderStyle = FormBorderStyle.Sizable; // Cho phep resize
            this.MaximizeBox = true; // Cho phep maximize
            this.MinimizeBox = true;
            
            // Set minimum size
            this.MinimumSize = new Size(520, 500);
            
            // Thiet lap hover effects cho cac button
            SetupButtonEffects();
            
            // Thiet lap gesture controls
            SetupGestureControls();
        }

        private void SetupButtonEffects()
        {
            // Thiet lap hover effects
            ButtonAnimationHelper.SetupButtonHoverEffects(btnRock);
            ButtonAnimationHelper.SetupButtonHoverEffects(btnPaper);
            ButtonAnimationHelper.SetupButtonHoverEffects(btnScissors);
            
            // Thiet lap mau sac ban dau
            btnRock.BackColor = GameConfig.ROCK_COLOR;
            btnPaper.BackColor = GameConfig.PAPER_COLOR;
            btnScissors.BackColor = GameConfig.SCISSORS_COLOR;
        }

        private void btnRock_Click(object sender, EventArgs e)
        {
            // Animation cho button click
            ButtonAnimationHelper.AnimateButtonClick(btnRock, () => {
                PlayGameWithAnimation("Da");
            });
        }

        private void btnPaper_Click(object sender, EventArgs e)
        {
            // Animation cho button click
            ButtonAnimationHelper.AnimateButtonClick(btnPaper, () => {
                PlayGameWithAnimation("Giay");
            });
        }

        private void btnScissors_Click(object sender, EventArgs e)
        {
            // Animation cho button click
            ButtonAnimationHelper.AnimateButtonClick(btnScissors, () => {
                PlayGameWithAnimation("Keo");
            });
        }

        private void PlayGameWithAnimation(string playerChoice)
        {
            // Disable tat ca buttons va animate
            DisableGameButtonsWithAnimation();
            
            // Hien thi choice confirmation
            Button chosenButton = GetButtonByChoice(playerChoice);
            if (chosenButton != null)
            {
                ButtonAnimationHelper.AnimateChoiceConfirmation(chosenButton);
            }
            
            // Reset gesture controls
            playerGestureControl?.Reset();
            computerGestureControl?.Reset();
            
            // Start countdown animation
            CountdownAnimationHelper.StartCountdown(this, () =>
            {
                // Bat dau "quoi quoi" animation cho ca hai ben
                string computerChoice = GetRandomComputerChoice();
                
                // Start player gesture animation
                playerGestureControl?.StartShakeAnimation(playerChoice, (choice) =>
                {
                    lblPlayerChoice.Text = $"Ban chon: {choice}";
                });
                
                // Start computer gesture animation (delay nho)
                System.Windows.Forms.Timer computerDelayTimer = new System.Windows.Forms.Timer();
                computerDelayTimer.Interval = 100; // 0.1 giay delay
                computerDelayTimer.Tick += (sender, e) =>
                {
                    computerGestureControl?.StartShakeAnimation(computerChoice, (choice) =>
                    {
                        lblComputerChoice.Text = $"May chon: {choice}";
                        
                        // Show result after both animations complete
                        ShowFinalResult(playerChoice, computerChoice);
                    });
                    
                    computerDelayTimer.Stop();
                    computerDelayTimer.Dispose();
                };
                computerDelayTimer.Start();
            });
        }

        private string GetRandomComputerChoice()
        {
            string[] choices = { "Da", "Giay", "Keo" };
            return choices[random.Next(3)];
        }

        private void ShowFinalResult(string playerChoice, string computerChoice)
        {
            string result = GetGameResult(playerChoice, computerChoice);
            
            // Show battle result with new control
            battleResultControl?.ShowBattleResult(playerChoice, computerChoice, result, playerName, "MAY TINH");
            
            // Update score
            if (result.Contains("Ban thang"))
            {
                playerScore++;
                // Win celebration is handled by BattleResultControl
            }
            else if (result.Contains("Ban thua"))
            {
                computerScore++;
                // Lose sound is handled by BattleResultControl
            }

            UpdateScore();
            
            // Enable lai buttons sau 4 giay (longer to see result)
            System.Windows.Forms.Timer enableTimer = new System.Windows.Forms.Timer();
            enableTimer.Interval = 4000;
            enableTimer.Tick += (sender, e) =>
            {
                EnableGameButtonsWithAnimation();
                
                // Reset gesture controls (but not battle result, it auto-hides)
                playerGestureControl?.Reset();
                computerGestureControl?.Reset();
                
                enableTimer.Stop();
                enableTimer.Dispose();
            };
            enableTimer.Start();
        }

        private Button? GetButtonByChoice(string choice)
        {
            return choice switch
            {
                "Da" => btnRock,
                "Giay" => btnPaper,
                "Keo" => btnScissors,
                _ => null
            };
        }

        private void ShowResultWithAnimation(string result)
        {
            // Tao hieu ung fade-in cho ket qua
            lblResult.Text = result;
            lblResult.ForeColor = Color.Transparent;
            
            System.Windows.Forms.Timer fadeTimer = new System.Windows.Forms.Timer();
            fadeTimer.Interval = 50;
            int fadeStep = 0;
            Color targetColor = result.Contains("Ban thang") ? Color.Green :
                               result.Contains("Ban thua") ? Color.Red : Color.Orange;
            
            fadeTimer.Tick += (sender, e) =>
            {
                fadeStep++;
                double progress = Math.Min(fadeStep / 10.0, 1.0);
                
                int alpha = (int)(255 * progress);
                lblResult.ForeColor = Color.FromArgb(alpha, targetColor);
                
                if (fadeStep >= 10)
                {
                    lblResult.ForeColor = targetColor;
                    fadeTimer.Stop();
                    fadeTimer.Dispose();
                }
            };
            fadeTimer.Start();
        }

        private void DisableGameButtonsWithAnimation()
        {
            btnRock.Enabled = false;
            btnPaper.Enabled = false;
            btnScissors.Enabled = false;
            
            ButtonAnimationHelper.AnimateButtonDisable(btnRock);
            ButtonAnimationHelper.AnimateButtonDisable(btnPaper);
            ButtonAnimationHelper.AnimateButtonDisable(btnScissors);
        }

        private void EnableGameButtonsWithAnimation()
        {
            btnRock.Enabled = true;
            btnPaper.Enabled = true;
            btnScissors.Enabled = true;
            
            ButtonAnimationHelper.AnimateButtonEnable(btnRock);
            ButtonAnimationHelper.AnimateButtonEnable(btnPaper);
            ButtonAnimationHelper.AnimateButtonEnable(btnScissors);
        }

        private string GetGameResult(string player, string computer)
        {
            if (player == computer)
                return "Hoa!";

            if ((player == "Da" && computer == "Keo") ||
                (player == "Giay" && computer == "Da") ||
                (player == "Keo" && computer == "Giay"))
            {
                return "Ban thang!";
            }
            else
            {
                return "Ban thua!";
            }
        }

        private void UpdateScore()
        {
            lblScore.Text = $"Ty so - {playerName}: {playerScore} | May: {computerScore}";
            
            // Animate score update
            System.Windows.Forms.Timer pulseTimer = new System.Windows.Forms.Timer();
            pulseTimer.Interval = 100;
            int pulseStep = 0;
            Font originalFont = lblScore.Font;
            
            pulseTimer.Tick += (sender, e) =>
            {
                pulseStep++;
                
                if (pulseStep <= 3)
                {
                    // Phong to
                    lblScore.Font = new Font(originalFont.FontFamily, originalFont.Size + 2, FontStyle.Bold);
                    lblScore.ForeColor = Color.DarkBlue;
                }
                else
                {
                    // Thu nho ve ban dau
                    lblScore.Font = originalFont;
                    lblScore.ForeColor = Color.DarkGreen;
                }
                
                if (pulseStep >= 6)
                {
                    pulseTimer.Stop();
                    pulseTimer.Dispose();
                }
            };
            pulseTimer.Start();
        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            // Animation cho reset
            ButtonAnimationHelper.AnimateButtonClick(btnReset, () => {
                ResetGameWithAnimation();
            });
        }

        private void ResetGameWithAnimation()
        {
            playerScore = 0;
            computerScore = 0;
            
            // Reset gesture controls
            playerGestureControl?.Reset();
            computerGestureControl?.Reset();
            
            // Animate reset process
            System.Windows.Forms.Timer resetTimer = new System.Windows.Forms.Timer();
            resetTimer.Interval = 100;
            int resetStep = 0;
            
            resetTimer.Tick += (sender, e) =>
            {
                resetStep++;
                
                switch (resetStep)
                {
                    case 1:
                        lblPlayerChoice.Text = "Ban chon: ---";
                        lblPlayerChoice.ForeColor = Color.Gray;
                        break;
                    case 2:
                        lblComputerChoice.Text = "May chon: ---";
                        lblComputerChoice.ForeColor = Color.Gray;
                        break;
                    case 3:
                        lblResult.Text = "Ket qua: ---";
                        lblResult.ForeColor = Color.Black;
                        break;
                    case 4:
                        UpdateScore();
                        break;
                    case 5:
                        // Khoi phuc mau sac ban dau
                        lblPlayerChoice.ForeColor = Color.Black;
                        lblComputerChoice.ForeColor = Color.Black;
                        resetTimer.Stop();
                        resetTimer.Dispose();
                        break;
                }
            };
            resetTimer.Start();
        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            // Cleanup timers va controls
            gameResultTimer?.Stop();
            gameResultTimer?.Dispose();
            ButtonAnimationHelper.StopCurrentAnimation();
            
            // Stop gesture animations
            playerGestureControl?.StopAnimation();
            computerGestureControl?.StopAnimation();
            
            // Hide battle result
            battleResultControl?.HideBattleResult();
            
            this.Close();
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            // Cleanup timers khi dong form
            gameResultTimer?.Stop();
            gameResultTimer?.Dispose();
            ButtonAnimationHelper.StopCurrentAnimation();
            
            // Stop gesture animations
            playerGestureControl?.StopAnimation();
            computerGestureControl?.StopAnimation();
            
            // Hide battle result
            battleResultControl?.HideBattleResult();
            
            base.OnFormClosing(e);
        }

        private void SetupGestureControls()
        {
            // Player gesture control
            playerGestureControl = new HandGestureAnimationControl();
            playerGestureControl.Location = new Point(50, 320);
            playerGestureControl.Size = new Size(120, 120);
            this.Controls.Add(playerGestureControl);

            // Computer gesture control  
            computerGestureControl = new HandGestureAnimationControl();
            computerGestureControl.Location = new Point(350, 320);
            computerGestureControl.Size = new Size(120, 120);
            this.Controls.Add(computerGestureControl);

            // Battle result control
            battleResultControl = new BattleResultControl();
            this.Controls.Add(battleResultControl);
            battleResultControl.CenterOnParent();

            // Bring gesture controls to front
            playerGestureControl.BringToFront();
            computerGestureControl.BringToFront();
            
            // Battle result should be on top of everything
            battleResultControl.BringToFront();
        }

        protected override void AdjustLayoutForFullscreen(bool isFullscreen)
        {
            // Dieu chinh layout khi fullscreen
            if (isFullscreen)
            {
                AdjustGameLayoutForFullscreen(true);
            }
            else
            {
                AdjustGameLayoutForFullscreen(false);
            }
        }

        private void AdjustGameLayoutForFullscreen(bool isFullscreen)
        {
            if (isFullscreen)
            {
                ApplyFullscreenGameLayout();
            }
            else
            {
                RestoreWindowedGameLayout();
            }
        }

        private void ApplyFullscreenGameLayout()
        {
            SuspendLayout();

            // Calculate optimal scale factor for fullscreen
            float baseWidth = 520f; // Minimum form width
            float baseHeight = 500f; // Minimum form height
            
            float widthScale = this.ClientSize.Width / baseWidth;
            float heightScale = this.ClientSize.Height / baseHeight;
            
            float scaleFactor = Math.Min(widthScale, heightScale) * 0.8f; // 0.8f for margins
            scaleFactor = Math.Max(scaleFactor, 1.3f); // Minimum scale
            scaleFactor = Math.Min(scaleFactor, 2.2f); // Maximum scale

            // Center layout positioning
            int centerX = this.ClientSize.Width / 2;
            int topMargin = (int)(50 * scaleFactor);

            // Adjust score and info labels - top center
            if (lblScore != null)
            {
                lblScore.Font = new Font(lblScore.Font.FontFamily, lblScore.Font.Size * scaleFactor, FontStyle.Bold);
                lblScore.AutoSize = true;
                lblScore.Location = new Point(centerX - lblScore.PreferredSize.Width / 2, topMargin);
            }

            // Position player name below score
            if (lblPlayerName != null)
            {
                lblPlayerName.Font = new Font(lblPlayerName.Font.FontFamily, lblPlayerName.Font.Size * scaleFactor);
                lblPlayerName.AutoSize = true;
                lblPlayerName.Location = new Point(centerX - lblPlayerName.PreferredSize.Width / 2, topMargin + (int)(40 * scaleFactor));
            }

            // Center game buttons horizontally
            var gameButtons = new[] { btnRock, btnPaper, btnScissors };
            var validGameButtons = gameButtons.Where(b => b != null).ToArray();
            
            if (validGameButtons.Length > 0)
            {
                int buttonSize = (int)(80 * scaleFactor);
                int buttonSpacing = (int)(40 * scaleFactor);
                int totalButtonWidth = (validGameButtons.Length * buttonSize) + ((validGameButtons.Length - 1) * buttonSpacing);
                int buttonStartX = centerX - totalButtonWidth / 2;
                int buttonY = topMargin + (int)(120 * scaleFactor);

                for (int i = 0; i < validGameButtons.Length; i++)
                {
                    var button = validGameButtons[i];
                    button.Size = new Size(buttonSize, buttonSize);
                    button.Location = new Point(
                        buttonStartX + (i * (buttonSize + buttonSpacing)),
                        buttonY
                    );
                    
                    // Scale font
                    button.Font = new Font(button.Font.FontFamily, 
                        Math.Max(button.Font.Size * scaleFactor, 10), button.Font.Style);
                }
            }

            // Position gesture controls symmetrically
            int gestureY = topMargin + (int)(220 * scaleFactor);
            int gestureSize = (int)(150 * scaleFactor);
            int gestureSpacing = this.ClientSize.Width / 4;

            if (playerGestureControl != null)
            {
                playerGestureControl.Size = new Size(gestureSize, gestureSize);
                playerGestureControl.Location = new Point(
                    gestureSpacing - gestureSize / 2,
                    gestureY
                );
            }

            if (computerGestureControl != null)
            {
                computerGestureControl.Size = new Size(gestureSize, gestureSize);
                computerGestureControl.Location = new Point(
                    this.ClientSize.Width - gestureSpacing - gestureSize / 2,
                    gestureY
                );
            }

            // Position choice labels below gestures
            int choiceLabelY = gestureY + gestureSize + (int)(20 * scaleFactor);
            
            if (lblPlayerChoice != null)
            {
                lblPlayerChoice.Font = new Font(lblPlayerChoice.Font.FontFamily, lblPlayerChoice.Font.Size * scaleFactor);
                lblPlayerChoice.AutoSize = true;
                lblPlayerChoice.Location = new Point(
                    gestureSpacing - lblPlayerChoice.PreferredSize.Width / 2,
                    choiceLabelY
                );
            }

            if (lblComputerChoice != null)
            {
                lblComputerChoice.Font = new Font(lblComputerChoice.Font.FontFamily, lblComputerChoice.Font.Size * scaleFactor);
                lblComputerChoice.AutoSize = true;
                lblComputerChoice.Location = new Point(
                    this.ClientSize.Width - gestureSpacing - lblComputerChoice.PreferredSize.Width / 2,
                    choiceLabelY
                );
            }

            // Center result label
            if (lblResult != null)
            {
                lblResult.Font = new Font(lblResult.Font.FontFamily, lblResult.Font.Size * scaleFactor, FontStyle.Bold);
                lblResult.AutoSize = true;
                lblResult.Location = new Point(
                    centerX - lblResult.PreferredSize.Width / 2,
                    choiceLabelY + (int)(50 * scaleFactor)
                );
            }

            // Position control buttons at bottom
            var controlButtons = new[] { btnReset, btnBack };
            var validControlButtons = controlButtons.Where(b => b != null).ToArray();
            
            if (validControlButtons.Length > 0)
            {
                int controlButtonWidth = (int)(120 * scaleFactor);
                int controlButtonHeight = (int)(40 * scaleFactor);
                int controlButtonSpacing = (int)(30 * scaleFactor);
                int totalControlWidth = (validControlButtons.Length * controlButtonWidth) + ((validControlButtons.Length - 1) * controlButtonSpacing);
                int controlStartX = centerX - totalControlWidth / 2;
                int controlY = this.ClientSize.Height - (int)(80 * scaleFactor);

                for (int i = 0; i < validControlButtons.Length; i++)
                {
                    var button = validControlButtons[i];
                    button.Size = new Size(controlButtonWidth, controlButtonHeight);
                    button.Location = new Point(
                        controlStartX + (i * (controlButtonWidth + controlButtonSpacing)),
                        controlY
                    );
                    
                    button.Font = new Font(button.Font.FontFamily, 
                        Math.Max(button.Font.Size * scaleFactor, 9), button.Font.Style);
                }
            }

            // Scale battle result control
            if (battleResultControl != null)
            {
                battleResultControl.ScaleForFullscreen(scaleFactor);
            }

            ResumeLayout(true);
        }

        private void RestoreWindowedGameLayout()
        {
            SuspendLayout();

            // Restore original positions (approximate)
            if (lblScore != null)
            {
                lblScore.Font = new Font(lblScore.Font.FontFamily, 12, FontStyle.Bold);
                lblScore.Location = new Point(20, 20);
            }

            if (lblPlayerName != null)
            {
                lblPlayerName.Font = new Font(lblPlayerName.Font.FontFamily, 10);
                lblPlayerName.Location = new Point(20, 50);
            }

            // Restore game buttons
            var gameButtons = new[] { btnRock, btnPaper, btnScissors };
            int[] buttonXPositions = { 50, 200, 350 };
            
            for (int i = 0; i < gameButtons.Length && i < buttonXPositions.Length; i++)
            {
                if (gameButtons[i] != null)
                {
                    gameButtons[i].Size = new Size(80, 80);
                    gameButtons[i].Location = new Point(buttonXPositions[i], 150);
                    gameButtons[i].Font = new Font(gameButtons[i].Font.FontFamily, 9);
                }
            }

            // Restore gesture controls
            if (playerGestureControl != null)
            {
                playerGestureControl.Size = new Size(120, 120);
                playerGestureControl.Location = new Point(50, 320);
            }

            if (computerGestureControl != null)
            {
                computerGestureControl.Size = new Size(120, 120);
                computerGestureControl.Location = new Point(350, 320);
            }

            // Restore labels
            if (lblPlayerChoice != null)
            {
                lblPlayerChoice.Font = new Font(lblPlayerChoice.Font.FontFamily, 10);
                lblPlayerChoice.Location = new Point(50, 450);
            }

            if (lblComputerChoice != null)
            {
                lblComputerChoice.Font = new Font(lblComputerChoice.Font.FontFamily, 10);
                lblComputerChoice.Location = new Point(350, 450);
            }

            if (lblResult != null)
            {
                lblResult.Font = new Font(lblResult.Font.FontFamily, 12, FontStyle.Bold);
                lblResult.Location = new Point(200, 480);
            }

            // Restore control buttons
            if (btnReset != null)
            {
                btnReset.Size = new Size(100, 35);
                btnReset.Location = new Point(150, 520);
                btnReset.Font = new Font(btnReset.Font.FontFamily, 9);
            }

            if (btnBack != null)
            {
                btnBack.Size = new Size(100, 35);
                btnBack.Location = new Point(270, 520);
                btnBack.Font = new Font(btnBack.Font.FontFamily, 9);
            }

            // Restore battle result control
            if (battleResultControl != null)
            {
                battleResultControl.ScaleForFullscreen(1.0f);
            }

            ResumeLayout(true);
        }
    }
}