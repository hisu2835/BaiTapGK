using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace BaiTapGK
{
    public partial class Form1 : FullscreenSupportForm
    {
        private string playerName = "";
        private bool isLoggedIn = false;
        
        // Luu original layout info
        private Dictionary<Control, Rectangle> originalBounds = new Dictionary<Control, Rectangle>();
        private Font? originalWelcomeFont;

        public Form1()
        {
            InitializeComponent();
            this.StartPosition = FormStartPosition.CenterScreen;
            this.FormBorderStyle = FormBorderStyle.Sizable; // Cho phep resize
            this.MaximizeBox = true; // Cho phep maximize
            this.MinimizeBox = true; // Cho phep minimize
            
            // Set minimum size
            this.MinimumSize = new Size(600, 400);
            
            // Store original layout information
            this.Load += (s, e) => StoreOriginalLayout();
        }

        private void StoreOriginalLayout()
        {
            // Luu layout ban dau de restore sau nay
            foreach (Control control in this.Controls)
            {
                if (control != null)
                {
                    originalBounds[control] = control.Bounds;
                }
            }
            
            // Luu font ban dau
            if (lblWelcome != null)
            {
                originalWelcomeFont = new Font(lblWelcome.Font.FontFamily, lblWelcome.Font.Size, lblWelcome.Font.Style);
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            // Hien thi form dang nhap khi form load
            ShowLoginForm();
        }

        private void ShowLoginForm()
        {
            LoginForm loginForm = new LoginForm();
            if (loginForm.ShowDialog() == DialogResult.OK)
            {
                playerName = loginForm.PlayerName;
                isLoggedIn = true;
                if (lblWelcome != null)
                    lblWelcome.Text = $"Chao mung, {playerName}!";
                EnableGameButtons(true);
            }
            else
            {
                // Neu nguoi dung huy dang nhap, dong ung dung
                Application.Exit();
            }
        }

        private void EnableGameButtons(bool enabled)
        {
            if (btnSinglePlayer != null)
                btnSinglePlayer.Enabled = enabled;
            if (btnMultiPlayer != null)
                btnMultiPlayer.Enabled = enabled;
            if (btnGameIntro != null)
                btnGameIntro.Enabled = enabled;
        }

        private void btnSinglePlayer_Click(object sender, EventArgs e)
        {
            if (!isLoggedIn)
            {
                MessageBox.Show("Vui long dang nhap truoc!", "Thong bao", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            SinglePlayerForm singlePlayerForm = new SinglePlayerForm(playerName);
            singlePlayerForm.ShowDialog();
        }

        private void btnMultiPlayer_Click(object sender, EventArgs e)
        {
            if (!isLoggedIn)
            {
                MessageBox.Show("Vui long dang nhap truoc!", "Thong bao", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            MultiPlayerForm multiPlayerForm = new MultiPlayerForm(playerName);
            multiPlayerForm.ShowDialog();
        }

        private void btnGameIntro_Click(object sender, EventArgs e)
        {
            GameIntroForm gameIntroForm = new GameIntroForm();
            gameIntroForm.ShowDialog();
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void btnChangeUser_Click(object sender, EventArgs e)
        {
            isLoggedIn = false;
            EnableGameButtons(false);
            ShowLoginForm();
        }

        protected override void AdjustLayoutForFullscreen(bool isFullscreen)
        {
            if (isFullscreen)
            {
                // Fullscreen mode - center everything and scale up
                ApplyFullscreenLayout();
            }
            else
            {
                // Windowed mode - restore original layout
                RestoreWindowedLayout();
            }
        }

        private void ApplyFullscreenLayout()
        {
            // Tinh toan scale factor dua tren screen size
            float baseWidth = 600f; // Original minimum width
            float baseHeight = 400f; // Original minimum height
            
            float widthScale = this.ClientSize.Width / baseWidth;
            float heightScale = this.ClientSize.Height / baseHeight;
            
            // Su dung scale factor nho hon de dam bao fit
            float scaleFactor = Math.Min(widthScale, heightScale) * 0.7f; // 0.7f de co margin
            scaleFactor = Math.Max(scaleFactor, 1.2f); // Minimum 1.2x scale
            scaleFactor = Math.Min(scaleFactor, 2.5f); // Maximum 2.5x scale for better visibility

            // Tao layout moi cho fullscreen
            ApplyFullscreenLayoutWithScale(scaleFactor);
        }

        private void ApplyFullscreenLayoutWithScale(float scaleFactor)
        {
            SuspendLayout();

            // Calculate center position for main content area
            int contentWidth = (int)(400 * scaleFactor); // Base content width
            int contentHeight = (int)(500 * scaleFactor); // Base content height
            
            int startX = (this.ClientSize.Width - contentWidth) / 2;
            int startY = Math.Max(50, (this.ClientSize.Height - contentHeight) / 2);

            // Position welcome label at top center with more prominence
            if (lblWelcome != null)
            {
                float welcomeFontSize = Math.Max(originalWelcomeFont?.Size ?? 12, 12) * scaleFactor;
                welcomeFontSize = Math.Min(welcomeFontSize, 28); // Cap font size
                
                lblWelcome.Font = new Font(originalWelcomeFont?.FontFamily ?? FontFamily.GenericSansSerif, 
                    welcomeFontSize, FontStyle.Bold);
                
                lblWelcome.AutoSize = true; // Let it auto-size first
                lblWelcome.Location = new Point(
                    (this.ClientSize.Width - lblWelcome.PreferredSize.Width) / 2,
                    startY
                );
                lblWelcome.ForeColor = Color.DarkBlue; // Make it more prominent
            }

            // Calculate button layout in vertical stack - centered and evenly spaced
            var buttons = new[] { btnSinglePlayer, btnMultiPlayer, btnGameIntro, btnChangeUser, btnExit };
            var validButtons = buttons.Where(b => b != null).ToArray();
            
            if (validButtons.Length > 0)
            {
                int buttonWidth = (int)(250 * scaleFactor); // Wider buttons
                int buttonHeight = (int)(55 * scaleFactor); // Taller buttons
                int buttonSpacing = (int)(25 * scaleFactor); // More spacing
                
                int totalButtonHeight = (validButtons.Length * buttonHeight) + ((validButtons.Length - 1) * buttonSpacing);
                int buttonStartY = startY + (int)(100 * scaleFactor); // More space after welcome label
                
                // Center buttons vertically in remaining space
                int availableHeight = this.ClientSize.Height - buttonStartY - (int)(80 * scaleFactor);
                if (totalButtonHeight < availableHeight)
                {
                    buttonStartY += (availableHeight - totalButtonHeight) / 2;
                }

                for (int i = 0; i < validButtons.Length; i++)
                {
                    var button = validButtons[i];
                    
                    // Scale button with better proportions
                    button.Size = new Size(buttonWidth, buttonHeight);
                    
                    // Center horizontally, stack vertically
                    button.Location = new Point(
                        (this.ClientSize.Width - buttonWidth) / 2,
                        buttonStartY + (i * (buttonHeight + buttonSpacing))
                    );
                    
                    // Scale font with better readability
                    float buttonFontSize = Math.Max(button.Font.Size, 9) * scaleFactor;
                    buttonFontSize = Math.Min(buttonFontSize, 16); // Cap button font size
                    
                    button.Font = new Font(button.Font.FontFamily, 
                        buttonFontSize, button.Font.Style);
                    
                    // Add some visual enhancement for fullscreen
                    button.FlatStyle = FlatStyle.Flat;
                    button.FlatAppearance.BorderSize = 2;
                    button.FlatAppearance.BorderColor = Color.DarkGray;
                }
            }

            ResumeLayout(true);
        }

        private void RestoreWindowedLayout()
        {
            SuspendLayout();

            // Restore original bounds and properties
            foreach (var kvp in originalBounds)
            {
                if (kvp.Key != null && !kvp.Key.IsDisposed)
                {
                    kvp.Key.Bounds = kvp.Value;
                    
                    // Restore original font and style if it's a button
                    if (kvp.Key is Button button)
                    {
                        // Restore original font size (estimate)
                        float originalSize = button.Font.Size / GetCurrentScaleFactor();
                        button.Font = new Font(button.Font.FontFamily, 
                            Math.Max(originalSize, 8), FontStyle.Regular);
                        
                        // Restore original button style
                        button.FlatStyle = FlatStyle.Standard;
                        button.ForeColor = SystemColors.ControlText;
                    }
                }
            }
            
            // Restore welcome label font and color
            if (lblWelcome != null && originalWelcomeFont != null)
            {
                lblWelcome.Font = new Font(originalWelcomeFont.FontFamily, 
                    originalWelcomeFont.Size, originalWelcomeFont.Style);
                lblWelcome.ForeColor = SystemColors.ControlText;
            }

            ResumeLayout(true);
        }

        private float GetCurrentScaleFactor()
        {
            // Estimate current scale factor from button size
            if (btnSinglePlayer != null && originalBounds.ContainsKey(btnSinglePlayer))
            {
                var originalSize = originalBounds[btnSinglePlayer].Size;
                if (originalSize.Width > 0)
                {
                    return (float)btnSinglePlayer.Width / originalSize.Width;
                }
            }
            return 1.0f;
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                // Cleanup fonts
                originalWelcomeFont?.Dispose();
                originalBounds.Clear();
            }
            base.Dispose(disposing);
        }
    }
}
