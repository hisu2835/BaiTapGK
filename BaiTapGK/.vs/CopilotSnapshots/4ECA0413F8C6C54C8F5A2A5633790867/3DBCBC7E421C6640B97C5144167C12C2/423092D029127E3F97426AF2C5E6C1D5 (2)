using System;
using System.Drawing;
using System.Windows.Forms;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Diagnostics;
using System.IO;

namespace BaiTapGK
{
    public partial class MultiPlayerForm : Form
    {
        private string playerName;
        private bool isHost = false;
        private TcpListener tcpListener;
        private TcpClient tcpClient;
        private NetworkStream stream;
        private Thread tcpListenerThread;
        private Thread tcpClientThread;
        private string roomId;
        private bool gameStarted = false;
        private string playerChoice = "";
        private string opponentChoice = "";
        private int playerScore = 0;
        private int opponentScore = 0;

        public MultiPlayerForm(string playerName)
        {
            InitializeComponent();
            this.playerName = playerName;
            lblPlayerName.Text = $"Nguoi choi: {playerName}";
            this.StartPosition = FormStartPosition.CenterScreen;
            this.FormBorderStyle = FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            
            // Tao Room ID ngau nhien
            roomId = GenerateRoomId();
            txtRoomId.Text = roomId;
            
            EnableGameButtons(false);
            
            // Hien thi thong tin IP local
            ShowLocalIPInfo();
        }

        private void ShowLocalIPInfo()
        {
            try
            {
                string localIP = NetworkUtils.GetLocalIPAddress();
                lblConnectionInfo.Text = $"IP Local: {localIP} | Room: {roomId}";
            }
            catch
            {
                lblConnectionInfo.Text = $"Room: {roomId}";
            }
        }

        private string GenerateRoomId()
        {
            return NetworkUtils.GenerateRoomId();
        }

        private void btnCreateRoom_Click(object sender, EventArgs e)
        {
            try
            {
                int port = int.Parse(txtPort.Text);
                
                if (!NetworkUtils.IsPortAvailable(port))
                {
                    MessageBox.Show($"Port {port} dang duoc su dung!", "Loi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                isHost = true;
                tcpListener = new TcpListener(IPAddress.Any, port);
                tcpListener.Start();
                
                tcpListenerThread = new Thread(new ThreadStart(ListenForClients));
                tcpListenerThread.IsBackground = true;
                tcpListenerThread.Start();
                
                lblStatus.Text = $"Dang cho nguoi choi ket noi den {NetworkUtils.GetLocalIPAddress()}:{port}";
                lblStatus.ForeColor = Color.Orange;
                btnCreateRoom.Enabled = false;
                btnJoinRoom.Enabled = false;
                
                // Hien thi thong tin cho ban be
                ShowConnectionInfo(port);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Loi khi tao phong: {ex.Message}", "Loi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ShowConnectionInfo(int port)
        {
            string localIP = NetworkUtils.GetLocalIPAddress();
            string message = $"THONG TIN KET NOI:\n\n" +
                           $"Server IP: {localIP}\n" +
                           $"Port: {port}\n" +
                           $"Room ID: {roomId}\n\n" +
                           $"Gui thong tin nay cho ban be de ho ket noi!\n\n" +
                           $"Su dung Wireshark de monitor traffic:\n" +
                           $"Filter: tcp port {port}";
            
            MessageBox.Show(message, "Thong tin Server", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void btnJoinRoom_Click(object sender, EventArgs e)
        {
            string serverIP = txtServerIP.Text.Trim();
            string portText = txtPort.Text.Trim();
            string inputRoomId = txtRoomId.Text.Trim();
            
            if (string.IsNullOrEmpty(serverIP) || string.IsNullOrEmpty(portText))
            {
                MessageBox.Show("Vui long nhap day du thong tin server!", "Thong bao", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if (!int.TryParse(portText, out int port))
            {
                MessageBox.Show("Port khong hop le!", "Loi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            try
            {
                isHost = false;
                tcpClient = new TcpClient();
                tcpClient.Connect(serverIP, port);
                stream = tcpClient.GetStream();
                
                tcpClientThread = new Thread(new ThreadStart(ListenForData));
                tcpClientThread.IsBackground = true;
                tcpClientThread.Start();
                
                // Gui ten nguoi choi
                SendMessage($"PLAYER:{playerName}");
                
                lblStatus.Text = $"Da ket noi den {serverIP}:{port}! San sang choi.";
                lblStatus.ForeColor = Color.Green;
                btnCreateRoom.Enabled = false;
                btnJoinRoom.Enabled = false;
                EnableGameButtons(true);
                gameStarted = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Khong the ket noi den server {serverIP}:{port}\n\nLoi: {ex.Message}", 
                    "Loi ket noi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnOpenWireshark_Click(object sender, EventArgs e)
        {
            try
            {
                string port = txtPort.Text;
                
                if (WiresharkIntegration.LaunchWireshark(port, out string errorMessage))
                {
                    MessageBox.Show($"Da mo Wireshark voi filter: tcp port {port}\n\n" +
                                   "Bat dau choi game de xem network traffic!\n\n" +
                                   "Tips:\n" +
                                   "- Right-click packet ? Follow TCP Stream\n" +
                                   "- Statistics ? Conversations", 
                                   "Wireshark Started", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    MessageBox.Show(errorMessage, "Loi Wireshark", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    WiresharkIntegration.ShowInstructions(port, txtServerIP.Text);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Loi: {ex.Message}", "Loi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void OpenWiresharkWithFilter(string port)
        {
            try
            {
                // Thu cac duong dan Wireshark thuong gap
                string[] wiresharkPaths = {
                    @"C:\Program Files\Wireshark\Wireshark.exe",
                    @"C:\Program Files (x86)\Wireshark\Wireshark.exe",
                    "wireshark.exe" // Neu co trong PATH
                };

                string wiresharkPath = "";
                foreach (string path in wiresharkPaths)
                {
                    if (File.Exists(path) || path == "wireshark.exe")
                    {
                        wiresharkPath = path;
                        break;
                    }
                }

                if (string.IsNullOrEmpty(wiresharkPath))
                {
                    // Neu khong tim thay Wireshark, hien thi huong dan
                    ShowWiresharkInstructions(port);
                    return;
                }

                // Tao filter cho game traffic
                string filter = $"tcp port {port}";
                
                // Khoi dong Wireshark voi filter
                ProcessStartInfo startInfo = new ProcessStartInfo
                {
                    FileName = wiresharkPath,
                    Arguments = $"-k -f \"{filter}\"", // -k: start capturing, -f: filter
                    UseShellExecute = false
                };

                Process.Start(startInfo);
                
                MessageBox.Show($"Da mo Wireshark voi filter: {filter}\n\n" +
                               "Bat dau choi game de xem network traffic!", 
                               "Wireshark", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                ShowWiresharkInstructions(port);
            }
        }

        private void ShowWiresharkInstructions(string port)
        {
            string instructions = $"HUONG DAN SU DUNG WIRESHARK:\n\n" +
                                 $"1. Mo Wireshark (tai tai: https://www.wireshark.org/)\n" +
                                 $"2. Chon network interface (thuong la Ethernet hoac WiFi)\n" +
                                 $"3. Ap dung filter: tcp port {port}\n" +
                                 $"4. Nhan Start de bat dau capture\n" +
                                 $"5. Choi game de xem traffic!\n\n" +
                                 $"CAC MESSAGE GAME BAN CO THE THAY:\n" +
                                 $"- PLAYER:[ten] - Khi player tham gia\n" +
                                 $"- CHOICE:[Da/Giay/Keo] - Khi player chon\n" +
                                 $"- RESULT:[ket qua] - Ket qua tran dau\n\n" +
                                 $"IP Server: {NetworkUtils.GetLocalIPAddress()}\n" +
                                 $"Port: {port}";

            MessageBox.Show(instructions, "Huong dan Wireshark", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void ListenForClients()
        {
            try
            {
                while (true)
                {
                    using (TcpClient client = tcpListener.AcceptTcpClient())
                    {
                        tcpClient = client;
                        stream = client.GetStream();
                        
                        this.Invoke((MethodInvoker)delegate
                        {
                            lblStatus.Text = "Nguoi choi da tham gia! San sang choi.";
                            lblStatus.ForeColor = Color.Green;
                            EnableGameButtons(true);
                            gameStarted = true;
                        });

                        ListenForData();
                    }
                }
            }
            catch (Exception ex)
            {
                this.Invoke((MethodInvoker)delegate
                {
                    lblStatus.Text = $"Loi server: {ex.Message}";
                    lblStatus.ForeColor = Color.Red;
                });
            }
        }

        private void ListenForData()
        {
            try
            {
                byte[] buffer = new byte[4096];
                while (true)
                {
                    int bytesRead = stream.Read(buffer, 0, buffer.Length);
                    if (bytesRead == 0) break;
                    
                    string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    ProcessMessage(message);
                }
            }
            catch (Exception ex)
            {
                this.Invoke((MethodInvoker)delegate
                {
                    lblStatus.Text = $"Mat ket noi: {ex.Message}";
                    lblStatus.ForeColor = Color.Red;
                    EnableGameButtons(false);
                });
            }
        }

        private void ProcessMessage(string message)
        {
            this.Invoke((MethodInvoker)delegate
            {
                if (message.StartsWith("PLAYER:"))
                {
                    string opponentName = message.Substring(7);
                    lblOpponent.Text = $"Doi thu: {opponentName}";
                }
                else if (message.StartsWith("CHOICE:"))
                {
                    opponentChoice = message.Substring(7);
                    CheckGameResult();
                }
                else if (message.StartsWith("RESULT:"))
                {
                    lblGameResult.Text = message.Substring(7);
                }
            });
        }

        private void SendMessage(string message)
        {
            try
            {
                if (stream != null)
                {
                    byte[] data = Encoding.UTF8.GetBytes(message);
                    stream.Write(data, 0, data.Length);
                }
            }
            catch (Exception ex)
            {
                lblStatus.Text = $"Loi gui tin nhan: {ex.Message}";
                lblStatus.ForeColor = Color.Red;
            }
        }

        private void btnRock_Click(object sender, EventArgs e)
        {
            MakeChoice("Da");
        }

        private void btnPaper_Click(object sender, EventArgs e)
        {
            MakeChoice("Giay");
        }

        private void btnScissors_Click(object sender, EventArgs e)
        {
            MakeChoice("Keo");
        }

        private void MakeChoice(string choice)
        {
            playerChoice = choice;
            lblPlayerChoice.Text = $"Ban chon: {choice}";
            SendMessage($"CHOICE:{choice}");
            
            EnableGameButtons(false);
            lblGameResult.Text = "Dang cho doi thu...";
            
            CheckGameResult();
        }

        private void CheckGameResult()
        {
            if (!string.IsNullOrEmpty(playerChoice) && !string.IsNullOrEmpty(opponentChoice))
            {
                lblOpponentChoice.Text = $"Doi thu chon: {opponentChoice}";
                
                string result = GetGameResult(playerChoice, opponentChoice);
                lblGameResult.Text = result;
                
                if (result.Contains("Ban thang"))
                {
                    playerScore++;
                    lblGameResult.ForeColor = Color.Green;
                }
                else if (result.Contains("Ban thua"))
                {
                    opponentScore++;
                    lblGameResult.ForeColor = Color.Red;
                }
                else
                {
                    lblGameResult.ForeColor = Color.Orange;
                }
                
                UpdateScore();
                
                // Reset cho van tiep theo
                System.Windows.Forms.Timer resetTimer = new System.Windows.Forms.Timer();
                resetTimer.Interval = 3000; // 3 giay
                resetTimer.Tick += (s, e) =>
                {
                    playerChoice = "";
                    opponentChoice = "";
                    lblPlayerChoice.Text = "Ban chon: ---";
                    lblOpponentChoice.Text = "Doi thu chon: ---";
                    lblGameResult.Text = "Chon lua chon cua ban";
                    lblGameResult.ForeColor = Color.Black;
                    EnableGameButtons(true);
                    resetTimer.Stop();
                    resetTimer.Dispose();
                };
                resetTimer.Start();
            }
        }

        private string GetGameResult(string player, string opponent)
        {
            if (player == opponent)
                return "Hoa!";

            if ((player == "Da" && opponent == "Keo") ||
                (player == "Giay" && opponent == "Da") ||
                (player == "Keo" && opponent == "Giay"))
            {
                return "Ban thang!";
            }
            else
            {
                return "Ban thua!";
            }
        }

        private void UpdateScore()
        {
            lblScore.Text = $"Ty so - Ban: {playerScore} | Doi thu: {opponentScore}";
        }

        private void EnableGameButtons(bool enabled)
        {
            btnRock.Enabled = enabled;
            btnPaper.Enabled = enabled;
            btnScissors.Enabled = enabled;
        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            // Dong ket noi
            try
            {
                stream?.Close();
                tcpClient?.Close();
                tcpListener?.Stop();
                
                // Su dung CancellationToken thay vi Abort()
                tcpListenerThread = null;
                tcpClientThread = null;
            }
            catch { }
            
            this.Close();
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            // Dong ket noi khi dong form
            try
            {
                stream?.Close();
                tcpClient?.Close();
                tcpListener?.Stop();
                
                tcpListenerThread = null;
                tcpClientThread = null;
            }
            catch { }
            
            base.OnFormClosing(e);
        }

        private void btnWiresharkHelp_Click(object sender, EventArgs e)
        {
            try
            {
                string port = txtPort.Text;
                string serverIP = string.IsNullOrEmpty(txtServerIP.Text) ? NetworkUtils.GetLocalIPAddress() : txtServerIP.Text;
                
                // Hien thi thong tin Wireshark status
                string status = WiresharkIntegration.IsWiresharkInstalled() ? 
                    "Da cai dat" : "Chua cai dat";
                string version = WiresharkIntegration.GetWiresharkVersion();
                
                string info = $"WIRESHARK STATUS:\n" +
                             $"Trang thai: {status}\n" +
                             $"Phien ban: {version}\n\n" +
                             $"Chon hanh dong:";
                
                DialogResult result = MessageBox.Show(info + "\n\nYes = Xem huong dan\nNo = Tao filter file\nCancel = Dong",
                    "Wireshark Help", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                
                switch (result)
                {
                    case DialogResult.Yes:
                        WiresharkIntegration.ShowInstructions(port, serverIP);
                        break;
                    case DialogResult.No:
                        WiresharkIntegration.CreateFilterFile(port);
                        break;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Loi: {ex.Message}", "Loi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}