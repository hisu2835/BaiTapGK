using System;
using System.Drawing;
using System.Windows.Forms;
using System.Linq;

namespace BaiTapGK
{
    public partial class NetworkMonitorForm : Form
    {
        private NetworkCapture networkCapture;
        private System.Windows.Forms.Timer updateTimer;
        private bool autoScroll = true;

        public NetworkMonitorForm()
        {
            InitializeComponent();
            networkCapture = new NetworkCapture();
            
            // Dang ky events
            networkCapture.PacketCaptured += OnPacketCaptured;
            networkCapture.StatusChanged += OnStatusChanged;
            
            // Timer de update UI
            updateTimer = new System.Windows.Forms.Timer();
            updateTimer.Interval = 1000; // 1 giay
            updateTimer.Tick += UpdateTimer_Tick;
            updateTimer.Start();
            
            // Load available interfaces
            LoadInterfaces();
            
            this.StartPosition = FormStartPosition.CenterScreen;
            this.FormBorderStyle = FormBorderStyle.Sizable;
        }

        private void LoadInterfaces()
        {
            try
            {
                var interfaces = networkCapture.GetAvailableInterfaces();
                cmbInterfaces.Items.Clear();
                foreach (var iface in interfaces)
                {
                    cmbInterfaces.Items.Add(iface);
                }
                if (cmbInterfaces.Items.Count > 0)
                    cmbInterfaces.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Loi khi load interfaces: {ex.Message}", "Loi", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void OnPacketCaptured(NetworkPacket packet)
        {
            // Update UI trong main thread
            this.Invoke((MethodInvoker)delegate
            {
                AddPacketToList(packet);
            });
        }

        private void OnStatusChanged(string status)
        {
            this.Invoke((MethodInvoker)delegate
            {
                lblStatus.Text = status;
            });
        }

        private void AddPacketToList(NetworkPacket packet)
        {
            try
            {
                var item = new ListViewItem(packet.Timestamp.ToString("HH:mm:ss.fff"));
                item.SubItems.Add(packet.SourceIP);
                item.SubItems.Add(packet.DestinationIP);
                item.SubItems.Add(packet.Protocol);
                item.SubItems.Add(packet.Length.ToString());
                item.SubItems.Add(packet.Info);
                item.Tag = packet;

                // Mau sac theo protocol
                switch (packet.Protocol)
                {
                    case "TCP":
                        item.BackColor = Color.LightBlue;
                        break;
                    case "UDP":
                        item.BackColor = Color.LightGreen;
                        break;
                    case "ICMP":
                        item.BackColor = Color.LightYellow;
                        break;
                    default:
                        item.BackColor = Color.White;
                        break;
                }

                lvPackets.Items.Add(item);

                // Gioi han so items trong ListView
                if (lvPackets.Items.Count > 1000)
                {
                    lvPackets.Items.RemoveAt(0);
                }

                // Auto scroll
                if (autoScroll && lvPackets.Items.Count > 0)
                {
                    lvPackets.EnsureVisible(lvPackets.Items.Count - 1);
                }
            }
            catch (Exception ex)
            {
                lblStatus.Text = $"Loi khi them packet: {ex.Message}";
            }
        }

        private void UpdateTimer_Tick(object? sender, EventArgs e)
        {
            // Update statistics
            lblStatistics.Text = networkCapture.GetStatistics();
        }

        private void btnStartCapture_Click(object sender, EventArgs e)
        {
            if (networkCapture.IsCapturing)
            {
                networkCapture.StopCapture();
                btnStartCapture.Text = "BAT DAU CAPTURE";
                btnStartCapture.BackColor = Color.LightGreen;
            }
            else
            {
                int interfaceIndex = cmbInterfaces.SelectedIndex;
                string filter = txtFilter.Text.Trim();
                
                if (networkCapture.StartCapture(interfaceIndex, filter))
                {
                    btnStartCapture.Text = "DUNG CAPTURE";
                    btnStartCapture.BackColor = Color.LightCoral;
                }
            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            lvPackets.Items.Clear();
            networkCapture.ClearPackets();
        }

        private void btnApplyFilter_Click(object sender, EventArgs e)
        {
            if (networkCapture.IsCapturing)
            {
                MessageBox.Show("Vui long dung capture truoc khi ap dung filter moi!", 
                    "Thong bao", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
        }

        private void chkAutoScroll_CheckedChanged(object sender, EventArgs e)
        {
            autoScroll = chkAutoScroll.Checked;
        }

        private void lvPackets_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lvPackets.SelectedItems.Count > 0)
            {
                var packet = (NetworkPacket?)lvPackets.SelectedItems[0].Tag;
                if (packet != null)
                    ShowPacketDetails(packet);
            }
        }

        private void ShowPacketDetails(NetworkPacket packet)
        {
            var details = $"Thoi gian: {packet.Timestamp:yyyy-MM-dd HH:mm:ss.fff}\n";
            details += $"Nguon: {packet.SourceIP}\n";
            details += $"Dich: {packet.DestinationIP}\n";
            details += $"Protocol: {packet.Protocol}\n";
            details += $"Kich thuoc: {packet.Length} bytes\n";
            details += $"Thong tin: {packet.Info}\n\n";

            // Hien thi raw data (hex dump)
            details += "Raw Data (Hex):\n";
            var hexData = BitConverter.ToString(packet.RawData).Replace("-", " ");
            
            // Chia thanh dong 16 bytes
            for (int i = 0; i < hexData.Length; i += 48) // 16 bytes * 3 chars per byte
            {
                var line = hexData.Substring(i, Math.Min(48, hexData.Length - i));
                details += $"{i / 48:X4}: {line}\n";
            }

            txtPacketDetails.Text = details;
        }

        private void btnExport_Click(object sender, EventArgs e)
        {
            try
            {
                using (var saveDialog = new SaveFileDialog())
                {
                    saveDialog.Filter = "CSV files (*.csv)|*.csv|Text files (*.txt)|*.txt";
                    saveDialog.Title = "Xuat du lieu packets";
                    
                    if (saveDialog.ShowDialog() == DialogResult.OK)
                    {
                        ExportPackets(saveDialog.FileName);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Loi khi xuat du lieu: {ex.Message}", "Loi", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ExportPackets(string fileName)
        {
            using (var writer = new System.IO.StreamWriter(fileName))
            {
                // Header
                writer.WriteLine("Timestamp,Source IP,Destination IP,Protocol,Length,Info");
                
                // Data
                foreach (ListViewItem item in lvPackets.Items)
                {
                    var packet = (NetworkPacket?)item.Tag;
                    if (packet != null)
                    {
                        writer.WriteLine($"{packet.Timestamp:yyyy-MM-dd HH:mm:ss.fff}," +
                                       $"{packet.SourceIP},{packet.DestinationIP}," +
                                       $"{packet.Protocol},{packet.Length},\"{packet.Info}\"");
                    }
                }
            }
            
            MessageBox.Show($"Da xuat {lvPackets.Items.Count} packets vao {fileName}", 
                "Thanh cong", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            networkCapture?.StopCapture();
            networkCapture?.Dispose();
            updateTimer?.Stop();
            updateTimer?.Dispose();
            base.OnFormClosing(e);
        }
    }
}